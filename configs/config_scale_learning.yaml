SETTINGS:
  name: Training_1
  num_workers: 8
  device: cuda
  log_path:
DATA:
  name: ICL
  data_path: /cluster/scratch/semilk/
  width: 320
  height: 256
  rgbd: True
  min_depth: 0.1
  max_depth: 80.0
  split:
  scales: [0]
  frames: [0, -1, 1] # [0, -1], [0, 1], or [0, -1, 1] ORDER MATTERS.
  normalize_intrinsics: False
  dilation: 2  #  Number of (original trajectoryâ€™s) frames to skip between two consecutive frames in the extracted sequence. Default: None
  stride:     # Number of frames between the first frames of two consecutive extracted sequences. Default: None
  start: 418  # Index of the frame from which to start extracting sequences for every trajectory. If None, will start from the first frame. Default: None
  use_gt_pose: True
MODEL:
  depth_network: indoor  #[monodepth2, indoor]
  num_layers: 18
  weights_init_encoder: False     # Type "imagenet" to load imagenet weights.
  use_pretrained_models: True             # Set to True for pretrained depth network
  pretrained_models_list: ["depth_encoder", "depth_decoder"]
  load_depth_path: /cluster/scratch/semilk/indoor_model_weights # Load path for pretrained indoors network
  #load_depth_path: /cluster/scratch/semilk/monodepth2_weigths/mono+stereo_640x192 # Load path for pretrained outdoors network
  slam: PointFusion  # [PointFusion, ICPSLAM]
  odom: gradicp    # [gt, icp, gradicp]
  dist_th: 0.05    # Default: 0.05
  angle_th: 20     # Default: 20
  sigma: 0.6       # Default 0.6
  numiters: 20     # Default 20
  padding_mode: border # [zeros, border]
  refinement_mode: True
LOSS:
  chamfer_distance: False
  chamfer_weight: 0.25
  knn_points: False
  knn_points_weight: 0.25
  auto_masking: False
  min_reprojection: False
  photometric_mask: False
  geometric: False
  geometric_weight: 0.1
  smoothness: False
  smoothness_weight: 1.e-3
  depth_regularizer: False
  depth_regularizer_weight: 1.e-3
  depth_regularizer_type: l2 # [l1, l2]
  supervise_depth: False
  sampling_type: random
  sampling_prob: 0.012 # Represent how many % of pixels do you want to keep in the depth map.
  gt_depth_weight: 1
  three3d_loss: True
  three3d_loss_weight: 1.0
OPTIMIZATION:
  batch_size: 1
  epochs: 50
  refinement: PFT # [PFT, OFT]
  refinement_steps: 20
  learning_rate: 1.e-5
  optimizer: Adam # [Adam, SGD]
  load_optimizer: False   # Uses same path as load_depth_path, just use this to set state
  schedular: StepLR  #[ StepLR, MultiStepLR]
  schedular_step_size: 100  # For StepLR
  schedular_milestones: [100, 200] # For MultiStepLR
  schedular_gamma: 0.5  # Decay factor for LR
DEPTH_RECOVER:
  noise_depth: True
  noise_color: True
  remove_pixels_depth: False  # Mask pixels in the image
  remove_pixels_color: False
  mask_height: 50
  mask_width: 50
  replace_depth: False # Replace the image by a constant
  replace_color: False
  optimize_depth: True
  optimize_color: True
ABLATION:
  scale_intrinsics: False
  focal_pretrain: 285.8
  scaled_depth: True
  scaling_depth: 6.0891 
  with_bias: True
  bias: -1.0958
EVALUATION:
  Add_Args:
VIZ:
  plot_first_step: False # strictly plots at step == 0
  plot_gt: False        # plots GT at the final step
  plot_final_step: False # plots predictions at final step
DEBUG:
  early_stop: True
  iter_stop: 0
  plot_path: C:\Users\akbar\PycharmProjects\End-To-End-Self-Supervised-SLAM\debug\latest_results
  plot: False
  print_metrics: True
SCALE_GRID_SEARCH:
  grid: [6.0, 7.0, 7.3, 7.5, 8.0]
DEMO:
  sequence_length: 60
  frame_threshold: 0.1
